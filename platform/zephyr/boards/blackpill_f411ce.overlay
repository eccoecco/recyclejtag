/ {
    rjtag {
        compatible = "gpio-keys";

        tck: tck  {
            gpios = <&gpiob 12 GPIO_ACTIVE_HIGH>;
        };

        tms: tms  {
            gpios = <&gpiob 13 GPIO_ACTIVE_HIGH>;
        };

        tdo: tdo  {
            gpios = <&gpiob 14 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;
        };

        tdi: tdi  {
            gpios = <&gpiob 15 GPIO_ACTIVE_HIGH>;
        };
    };
};

&zephyr_udc0 {
    cdc_acm_uart0 {
        compatible = "zephyr,cdc-acm-uart";
    };
};

// Used for the hardware driven JTAG signals

&timers1 {
    status = "okay";

    st,countermode = <0>; // Counter mode up
    st,prescaler = <47999>;

    pwm1: pwm {
        status = "okay";
        pinctrl-0 = <&tim1_ch1n_pb13 &tim1_ch2n_pb0 &tim1_ch3n_pb1>;
        pinctrl-names = "default";
    };
};

/ {
    rjtaghw {
        compatible = "pwm-leds";
        status = "okay";

        // If using an complementary channel (e.g. ch1n, ch2n, ch3n, ch4n...)
        // then you must add the STM32_PWM_COMPLEMENTARY flag
        // SCK set up for CPOL=0, CPHA=1 (i.e. clock idle low, change on rising
        // edge, sample on falling edge)
        rjtagsck: rjtagsck {
            pwms = <&pwm1 2 1000 (PWM_POLARITY_INVERTED | STM32_PWM_COMPLEMENTARY)>,
                   <&pwm1 3 1000 (PWM_POLARITY_INVERTED | STM32_PWM_COMPLEMENTARY)>;
        };

        // TCK set up for CPOL=1, CPHA=1 (i.e. clock idle high, change on falling
        // edge, sample on rising edge)
        rjtagtck: rjtagtck {
            pwms = <&pwm1 1 1000 (PWM_POLARITY_NORMAL | STM32_PWM_COMPLEMENTARY)>;
        };
    };

    aliases {
        rjtagtimer = &timers1;
    };
};