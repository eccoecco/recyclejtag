/ {
    rjtag {
        compatible = "gpio-keys";

        tck: tck  {
            gpios = <&gpiob 12 GPIO_ACTIVE_HIGH>;
        };

        tms: tms  {
            gpios = <&gpiob 13 GPIO_ACTIVE_HIGH>;
        };

        tdo: tdo  {
            gpios = <&gpiob 14 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;
        };

        tdi: tdi  {
            gpios = <&gpiob 15 GPIO_ACTIVE_HIGH>;
        };
    };
};

&zephyr_udc0 {
    cdc_acm_uart0 {
        compatible = "zephyr,cdc-acm-uart";
    };
};

// Used for the hardware driven JTAG signals

&timers1 {
    status = "okay";

    st,countermode = <0>; // Counter mode up

    pwm1: pwm {
        status = "okay";
        pinctrl-0 = <&tim1_ch1_pa8>;
        pinctrl-names = "default";
    };
};


&timers2 {
    status = "okay";

    st,countermode = <0>; // Counter mode up

    // During debug and test, prescale down to very low frequencies
    st,prescaler = <47999>;

    pwm2: pwm {
        status = "okay";
        pinctrl-0 = <&tim2_ch1_pa5>;
        pinctrl-names = "default";
    };
};


&timers3 {
    status = "okay";

    st,countermode = <0>; // Counter mode up

    // During debug and test, prescale down to very low frequencies
    st,prescaler = <47999>;

    pwm3: pwm {
        status = "okay";
        pinctrl-0 = <&tim3_ch1_pa6 &tim3_ch4_pb1>;
        pinctrl-names = "default";
    };

};

&timers4 {
    status = "okay";

    st,countermode = <0>; // Counter mode up

    // During debug and test, prescale down to very low frequencies
    st,prescaler = <47999>;

    pwm4: pwm {
        status = "okay";
        pinctrl-0 = <&tim4_ch1_pb6>;
        pinctrl-names = "default";
    };
};

&timers5 {
    status = "okay";

    st,countermode = <0>; // Counter mode up

    pwm5: pwm {
        status = "okay";
        pinctrl-0 = <&tim5_ch1_pa0>;
        pinctrl-names = "default";
    };
};

/ {
    rjtaghw {
        compatible = "pwm-leds";
        status = "okay";

        // TODO: Split these out into separate pwms (e.g. two for sck, one for tck,
        // one for sckcounter, one for tckcounter, and the final for sourceclk)

        // The internal clocking are brought out to pins because it's easier to
        // debug/probe than internal signals

        rjtagsck: rjtagsck {
            pwms = <&pwm3 1 1000 PWM_POLARITY_NORMAL>,
                   <&pwm3 4 1000 PWM_POLARITY_NORMAL>;
        };
        rjtagsckcounter: rjtagsckcounter{
            pwms = <&pwm5 1 1000 PWM_POLARITY_NORMAL>;
        };

        rjtagtck: rjtagtck {
            pwms = <&pwm4 1 1000 PWM_POLARITY_NORMAL>;
        };
        rjtagtckcounter: rjtagtckcounter {
            pwms = <&pwm1 1 1000 PWM_POLARITY_NORMAL>;
        };

        rjtagsource: rjtagsource {
            pwms = <&pwm2 1 1000 PWM_POLARITY_NORMAL>;
        };
    };
};